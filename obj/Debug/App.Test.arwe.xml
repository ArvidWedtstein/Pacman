<?xml version="1.0"?>
<doc>
<assembly>
<name>
App.Test.arwe
</name>
</assembly>
<members>
<member name="T:App.Test.arwe.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:App.Test.arwe.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:App.Test.arwe.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:App.Test.arwe.My.Resources.Resources.Skjermbilde_2022_07_20_1608492">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="T:App.Test.arwe.AldousBroderAlgorithm">
 <summary>
 1. Pick a random cell as the current cell and mark it as visited.
 2. While there are unvisited cells: 
     1. Pick a random neighbour.
     2. If the chosen neighbour has not been visited: 
         1. Remove the wall between the current cell and the chosen neighbour.
         2. Mark the chosen neighbour as visited.
     3. Make the chosen neighbour the current cell.
 </summary>
</member>
<member name="T:App.Test.arwe.DepthOfRecursion">
 <summary>
 1. Choose the initial cell, mark it as visited and push it to the stack
 2. While the stack is not empty 
     1. Pop a cell from the stack and make it a current cell
     2. If the current cell has any neighbours which have not been visited 
         1. Push the current cell to the stack
         2. Choose one of the unvisited neighbours
         3. Remove the wall between the current cell and the chosen cell
         4. Mark the chosen cell as visited and push it to the stack
 </summary>
</member>
<member name="T:App.Test.arwe.DijkstrasAlgorithm">
 <summary>
 1. Mark all nodes unvisited. Create a set of all the unvisited nodes called the unvisited set.
 2. Assign to every node a tentative distance value: set it to zero for our initial node and to infinity for all other nodes. 
 During the run of the algorithm, the tentative distance of a node v is the length of the shortest path discovered so far between the node v and the starting node. 
 Since initially no path is known to any other vertex than the source itself (which is a path of length zero), 
 all other tentative distances are initially set to infinity. Set the initial node as current.
 3. For the current node, consider all of its unvisited neighbors and calculate their tentative distances through the current node. 
 Compare the newly calculated tentative distance to the one currently assigned to the neighbor and assign it the smaller one. 
 For example, if the current node A is marked with a distance of 6, and the edge connecting it with a neighbor B has length 2, 
 then the distance to B through A will be 6 + 2 = 8. If B was previously marked with a distance greater than 8 then change it to 8. 
 Otherwise, the current value will be kept.
 4. When we are done considering all of the unvisited neighbors of the current node, 
 mark the current node as visited and remove it from the unvisited set. 
 A visited node will never be checked again (this is valid and optimal in connection with the behavior in step 6.: 
 that the next nodes to visit will always be in the order of 'smallest distance from initial node first' so any visits after would have a greater distance).
 5. If the destination node has been marked visited (when planning a route between two specific nodes) or 
 if the smallest tentative distance among the nodes in the unvisited set is infinity (when planning a complete traversal; 
 occurs when there is no connection between the initial node and remaining unvisited nodes), then stop. The algorithm has finished.
 6. Otherwise, select the unvisited node that is marked with the smallest tentative distance, set it as the new current node, and go back to step 3.
 </summary>
</member>
<member name="M:App.Test.arwe.TestForm.GenGrid">
 <summary>
 Generate grid for pacman
 </summary>
</member>
<member name="M:App.Test.arwe.TestForm.GenerateFields">
 <summary>
 Pacman Maze rules
 1. Paths are only 1 tile thick.
 2. No sharp turns (i.e. intersections are separated by atleast 2 tiles).
 3. There are 1 Or 2 tunnels.
 4. No dead-ends.
 5. Only I, L, T, or + wall shapes are allowed, including the occasional rectangular wall.
 6. Any non-rectangular wall pieces must only be 2 tiles thick.
 </summary>
</member>
<member name="T:App.Test.arwe.KruskalsAlgorithm">
 <summary>
 1. Create a list of all walls, and create a set for each cell, each containing just that one cell.
 2. For each wall, in some random order: 
     1. If the cells divided by this wall belong to distinct sets: 
         1. Remove the current wall.
         2. Join the sets of the formerly divided cells.
 </summary>
</member>
<member name="M:App.Test.arwe.ListExtensions.Pop``1(System.Collections.Generic.List{``0}@)">
 <summary>
 Removes and returns the last item in an array
 </summary>
 <typeparam name="T"></typeparam>
 <param name="array"></param>
 <returns></returns>
</member>
<member name="T:App.Test.arwe.PacmanDBDataSet">
<summary>
Represents a strongly typed in-memory cache of data.
</summary>
</member>
<member name="M:App.Test.arwe.PerlinNoise.WideNoise(System.Double,System.Int32)">
 <summary>
 Calculates a single octave widened 1D Perlin Noise value between 0 and 1 for input value x.
 </summary>
 <param name="x">The input of the 1D Perlin Noise function.</param>
 <param name="factor">The number of times the widening function is applied</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.WideNoise(System.Double,System.Int32,System.Double,System.Int32)">
 <summary>
 Calculates a widened 1D Perlin Noise value between 0 and 1 for input value x with given octaves and persistence.
 </summary>
 <param name="x">The input of the 1D Perlin Noise function.</param>
 <param name="octaves">Number of octaves used to calculate the 1D Perlin Noise.</param>
 <param name="persistence">Relative strength of higher octaves in the 1D Perlin Noise function.</param>
 <param name="factor">The number of times the widening function is applied</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.Noise(System.Double)">
 <summary>
 Calculates a single octave 1D Perlin Noise value between 0 and 1 for input value x.
 </summary>
 <param name="x">The input of the 1D Perlin Noise function.</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.Noise(System.Double,System.Int32,System.Double)">
 <summary>
 Calculates a 1D Perlin Noise value between 0 and 1 for input value x with given octaves and persistence.
 </summary>
 <param name="x">The input of the 1D Perlin Noise function.</param>
 <param name="octaves">Number of octaves used to calculate the 1D Perlin Noise.</param>
 <param name="persistence">Relative strength of higher octaves in the 1D Perlin Noise function.</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.WideNoise2D(System.Double,System.Double,System.Int32)">
 <summary>
 Calculates a single octave widened 2D Perlin Noise value between 0 and 1 for input values x,y.
 </summary>
 <param name="x">The x input of the 2D Perlin Noise function.</param>
 <param name="y">The y input of the 2D Perlin Noise function.</param>
 <param name="factor">The number of times the widening function is applied</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.WideNoise2D(System.Double,System.Double,System.Int32,System.Double,System.Int32)">
 <summary>
 Calculates a widened 2D Perlin Noise value between 0 and 1 for input values x,y with given octaves and persistence.
 </summary>
 <param name="x">The x input of the 2D Perlin Noise function.</param>
 <param name="y">The y input of the 2D Perlin Noise function.</param>
 <param name="octaves">Number of octaves used to calculate the 2D Perlin Noise.</param>
 <param name="persistence">Relative strength of higher octaves in the 2D Perlin Noise function.</param>
 <param name="factor">The number of times the widening function is applied</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.Noise2D(System.Double,System.Double)">
 <summary>
 Calculates a single octave 2D Perlin Noise value between 0 and 1 for input values x,y.
 </summary>
 <param name="x">The x input of the 2D Perlin Noise function.</param>
 <param name="y">The y input of the 2D Perlin Noise function.</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.Noise2D(System.Double,System.Double,System.Int32,System.Double)">
 <summary>
 Calculates a 2D Perlin Noise value between 0 and 1 for input values x,y with given octaves and persistence.
 </summary>
 <param name="x">The x input of the 2D Perlin Noise function.</param>
 <param name="y">The y input of the 2D Perlin Noise function.</param>
 <param name="octaves">Number of octaves used to calculate the 2D Perlin Noise.</param>
 <param name="persistence">Relative strength of higher octaves in the 2D Perlin Noise function.</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.WideNoise3D(System.Double,System.Double,System.Double,System.Int32)">
 <summary>
 Calculates a single octave widened 3D Perlin Noise value between 0 and 1 for input values x,y,z.
 </summary>
 <param name="x">The x input of the 3D Perlin Noise function.</param>
 <param name="y">The y input of the 3D Perlin Noise function.</param>
 <param name="z">The z input of the 3D Perlin Noise function.</param>
 <param name="factor">The number of times the widening function is applied</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.WideNoise3D(System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)">
 <summary>
 Calculates a widened 3D Perlin Noise value between 0 and 1 for input values x,y,z with given octaves and persistence.
 </summary>
 <param name="x">The x input of the 3D Perlin Noise function.</param>
 <param name="y">The y input of the 3D Perlin Noise function.</param>
 <param name="z">The z input of the 3D Perlin Noise function.</param>
 <param name="octaves">Number of octaves used to calculate the 3D Perlin Noise.</param>
 <param name="persistence">Relative strength of higher octaves in the 3D Perlin Noise function.</param>
 <param name="factor">The number of times the widening function is applied</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.Noise3D(System.Double,System.Double,System.Double)">
 <summary>
 Calculates a single octave 3D Perlin Noise value between 0 and 1 for input values x,y,z.
 </summary>
 <param name="x">The x input of the 3D Perlin Noise function.</param>
 <param name="y">The y input of the 3D Perlin Noise function.</param>
 <param name="z">The z input of the 3D Perlin Noise function.</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.Noise3D(System.Double,System.Double,System.Double,System.Int32,System.Double)">
 <summary>
 Calculates a 3D Perlin Noise value between 0 and 1 for input values x,y,z with given octaves and persistence.
 </summary>
 <param name="x">The x input of the 3D Perlin Noise function.</param>
 <param name="y">The y input of the 3D Perlin Noise function.</param>
 <param name="z">The z input of the 3D Perlin Noise function.</param>
 <param name="octaves">Number of octaves used to calculate the 3D Perlin Noise.</param>
 <param name="persistence">Relative strength of higher octaves in the 3D Perlin Noise function.</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.WideNoise4D(System.Double,System.Double,System.Double,System.Double,System.Int32)">
 <summary>
 Calculates a single octave widened 4D Perlin Noise value between 0 and 1 for input values x,y,z,w.
 </summary>
 <param name="x">The x input of the 4D Perlin Noise function.</param>
 <param name="y">The y input of the 4D Perlin Noise function.</param>
 <param name="z">The z input of the 4D Perlin Noise function.</param>
 <param name="w">The w input of the 4D Perlin Noise function.</param>
 <param name="factor">The number of times the widening function is applied</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.WideNoise4D(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)">
 <summary>
 Calculates a widened 4D Perlin Noise value between 0 and 1 for input values x,y,z,w with given octaves and persistence.
 </summary>
 <param name="x">The x input of the 4D Perlin Noise function.</param>
 <param name="y">The y input of the 4D Perlin Noise function.</param>
 <param name="z">The z input of the 4D Perlin Noise function.</param>
 <param name="w">The w input of the 4D Perlin Noise function.</param>
 <param name="octaves">Number of octaves used to calculate the 4D Perlin Noise.</param>
 <param name="persistence">Relative strength of higher octaves in the 4D Perlin Noise function.</param>
 <param name="factor">The number of times the widening function is applied</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.Noise4D(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Calculates a single octave 4D Perlin Noise value between 0 and 1 for input values x,y,z,w.
 </summary>
 <param name="x">The x input of the 4D Perlin Noise function.</param>
 <param name="y">The y input of the 4D Perlin Noise function.</param>
 <param name="z">The z input of the 4D Perlin Noise function.</param>
 <param name="w">The w input of the 4D Perlin Noise function.</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.Noise4D(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double)">
 <summary>
 Calculates a 4D Perlin Noise value between 0 and 1 for input values x,y,z,w with given octaves and persistence.
 </summary>
 <param name="x">The x input of the 4D Perlin Noise function.</param>
 <param name="y">The y input of the 4D Perlin Noise function.</param>
 <param name="z">The z input of the 4D Perlin Noise function.</param>
 <param name="w">The w input of the 4D Perlin Noise function.</param>
 <param name="octaves">Number of octaves used to calculate the 4D Perlin Noise.</param>
 <param name="persistence">Relative strength of higher octaves in the 4D Perlin Noise function.</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.Perlin(System.Double)">
 <summary>
 Calculates the standard 1D Perlin Noise value between 0 and 1 for input value x.
 </summary>
 <param name="x">The x input of the 1D Perlin Noise function.</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.Perlin2D(System.Double,System.Double)">
 <summary>
 Calculates the standard 2D Perlin Noise value between 0 and 1 for input values x,y.
 </summary>
 <param name="x">The x input of the 2D Perlin Noise function.</param>
 <param name="y">The y input of the 2D Perlin Noise function.</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.Perlin3D(System.Double,System.Double,System.Double)">
 <summary>
 Calculates the standard 3D Perlin Noise value between 0 and 1 for input values x,y,z.
 </summary>
 <param name="x">The x input of the 3D Perlin Noise function.</param>
 <param name="y">The y input of the 3D Perlin Noise function.</param>
 <param name="z">The z input of the 3D Perlin Noise function.</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.Perlin4D(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Calculates the standard 4D Perlin Noise value between 0 and 1 for input values x,y,z,w.
 </summary>
 <param name="x">The x input of the 4D Perlin Noise function.</param>
 <param name="y">The y input of the 4D Perlin Noise function.</param>
 <param name="z">The z input of the 4D Perlin Noise function.</param>
 <param name="w">The w input of the 4D Perlin Noise function.</param>
</member>
<member name="M:App.Test.arwe.PerlinNoise.SmoothStep(System.Double,System.Double,System.Double,System.Int32)">
 <summary>
 Stretches a value toward the ends of an interval (uses the Fade function defined by K. Perlin).
 </summary>
 <param name="x">value that will be stretched</param>
 <param name="lower">Lower end of the interval</param>
 <param name="upper">Upper end of the interval</param>
 <param name="Strength">Number of times the Fade function is applied.</param>
 <returns></returns>
</member>
<member name="M:App.Test.arwe.OpenSimplexNoise.WideSimplex2D(System.Double,System.Double,System.Int32)">
 <summary>
 Calculates a widened single octave 2D OpenSimplex Noise value between 0 and 1 for input values x,y.
 </summary>
 <param name="x">The x input of the 2D OpenSimplex Noise function.</param>
 <param name="y">The y input of the 2D OpenSimplex Noise function.</param>
 <param name="factor">The number of times the widening function is applied</param>
</member>
<member name="M:App.Test.arwe.OpenSimplexNoise.Simplex2D(System.Double,System.Double)">
 <summary>
 Calculates a single octave 2D OpenSimplex Noise value between 0 and 1 for input values x,y.
 </summary>
 <param name="x">The x input of the 2D OpenSimplex Noise function.</param>
 <param name="y">The y input of the 2D OpenSimplex Noise function.</param>
</member>
<member name="M:App.Test.arwe.OpenSimplexNoise.WideSimplex2D(System.Double,System.Double,System.Int32,System.Double,System.Int32)">
 <summary>
 Calculates a widened 2D OpenSimplex Noise value between 0 and 1 for input values x,y with given octaves and persistence.
 </summary>
 <param name="x">The x input of the 2D OpenSimplex Noise function.</param>
 <param name="y">The y input of the 2D OpenSimplex Noise function.</param>
 <param name="octaves">Number of octaves used to calculate the 2D OpenSimplex Noise.</param>
 <param name="persistence">Relative strength of higher octaves in the 2D OpenSimplex Noise function.</param>
 <param name="factor">The number of times the widening function is applied</param>
</member>
<member name="M:App.Test.arwe.OpenSimplexNoise.Simplex2D(System.Double,System.Double,System.Int32,System.Double)">
 <summary>
 Calculates a 2D OpenSimplex Noise value between 0 and 1 for input values x,y with given octaves and persistence.
 </summary>
 <param name="x">The x input of the 2D OpenSimplex Noise function.</param>
 <param name="y">The y input of the 2D OpenSimplex Noise function.</param>
 <param name="octaves">Number of octaves used to calculate the 2D OpenSimplex Noise.</param>
 <param name="persistence">Relative strength of higher octaves in the 2D OpenSimplex Noise function.</param>
</member>
<member name="M:App.Test.arwe.OpenSimplexNoise.WideSimplex3D(System.Double,System.Double,System.Double,System.Int32)">
 <summary>
 Calculates a widened single octave 3D OpenSimplex Noise value between 0 and 1 for input values x,y,z.
 </summary>
 <param name="x">The x input of the 3D OpenSimplex Noise function.</param>
 <param name="y">The y input of the 3D OpenSimplex Noise function.</param>
 <param name="z">The z input of the 3D OpenSimplex Noise function.</param>
 <param name="factor">The number of times the widening function is applied</param>
</member>
<member name="M:App.Test.arwe.OpenSimplexNoise.Simplex3D(System.Double,System.Double,System.Double)">
 <summary>
 Calculates a single octave 3D OpenSimplex Noise value between 0 and 1 for input values x,y,z.
 </summary>
 <param name="x">The x input of the 3D OpenSimplex Noise function.</param>
 <param name="y">The y input of the 3D OpenSimplex Noise function.</param>
 <param name="z">The z input of the 3D OpenSimplex Noise function.</param>
</member>
<member name="M:App.Test.arwe.OpenSimplexNoise.WideSimplex3D(System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)">
 <summary>
 Calculates a widened 3D OpenSimplex Noise value between 0 and 1 for input values x,y,z with given octaves and persistence.
 </summary>
 <param name="x">The x input of the 3D OpenSimplex Noise function.</param>
 <param name="y">The y input of the 3D OpenSimplex Noise function.</param>
 <param name="z">The z input of the 3D OpenSimplex Noise function.</param>
 <param name="octaves">Number of octaves used to calculate the 3D Perlin Noise.</param>
 <param name="persistence">Relative strength of higher octaves in the 3D Perlin Noise function.</param>
 <param name="factor">The number of times the widening function is applied</param>
</member>
<member name="M:App.Test.arwe.OpenSimplexNoise.Simplex3D(System.Double,System.Double,System.Double,System.Int32,System.Double)">
 <summary>
 Calculates a 3D OpenSimplex Noise value between 0 and 1 for input values x,y,z with given octaves and persistence.
 </summary>
 <param name="x">The x input of the 3D OpenSimplex Noise function.</param>
 <param name="y">The y input of the 3D OpenSimplex Noise function.</param>
 <param name="z">The z input of the 3D OpenSimplex Noise function.</param>
 <param name="octaves">Number of octaves used to calculate the 3D OpenSimplex Noise.</param>
 <param name="persistence">Relative strength of higher octaves in the 3D OpenSimplex Noise function.</param>
</member>
<member name="M:App.Test.arwe.OpenSimplexNoise.WideSimplex4D(System.Double,System.Double,System.Double,System.Double,System.Int32)">
 <summary>
 Calculates a single octave widened 4D OpenSimplex Noise value between 0 and 1 for input values x,y,z,w.
 </summary>
 <param name="x">The x input of the 4D OpenSimplex Noise function.</param>
 <param name="y">The y input of the 4D OpenSimplex Noise function.</param>
 <param name="z">The z input of the 4D OpenSimplex Noise function.</param>
 <param name="w">The w input of the 4D OpenSimplex Noise function.</param>
 <param name="factor">The number of times the widening function is applied</param>
</member>
<member name="M:App.Test.arwe.OpenSimplexNoise.Simplex4D(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Calculates a single octave 4D OpenSimplex Noise value between 0 and 1 for input values x,y,z,w.
 </summary>
 <param name="x">The x input of the 4D OpenSimplex Noise function.</param>
 <param name="y">The y input of the 4D OpenSimplex Noise function.</param>
 <param name="z">The z input of the 4D OpenSimplex Noise function.</param>
 <param name="w">The w input of the 4D OpenSimplex Noise function.</param>
</member>
<member name="M:App.Test.arwe.OpenSimplexNoise.WideSimplex4D(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)">
 <summary>
 Calculates a widened 4D OpenSimplex Noise value between 0 and 1 for input values x,y,z,w with given octaves and persistence.
 </summary>
 <param name="x">The x input of the 4D OpenSimplex Noise function.</param>
 <param name="y">The y input of the 4D OpenSimplex Noise function.</param>
 <param name="z">The z input of the 4D OpenSimplex Noise function.</param>
 <param name="w">The w input of the 4D OpenSimplex Noise function.</param>
 <param name="octaves">Number of octaves used to calculate the 4D OpenSimplex Noise.</param>
 <param name="persistence">Relative strength of higher octaves in the 4D OpenSimplex Noise function.</param>
 <param name="factor">The number of times the widening function is applied</param>
</member>
<member name="M:App.Test.arwe.OpenSimplexNoise.Simplex4D(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double)">
 <summary>
 Calculates a 4D OpenSimplex Noise value between 0 and 1 for input values x,y,z,w with given octaves and persistence.
 </summary>
 <param name="x">The x input of the 4D OpenSimplex Noise function.</param>
 <param name="y">The y input of the 4D OpenSimplex Noise function.</param>
 <param name="z">The z input of the 4D OpenSimplex Noise function.</param>
 <param name="w">The w input of the 4D OpenSimplex Noise function.</param>
 <param name="octaves">Number of octaves used to calculate the 4D OpenSimplex Noise.</param>
 <param name="persistence">Relative strength of higher octaves in the 4D OpenSimplex Noise function.</param>
</member>
<member name="M:App.Test.arwe.OpenSimplexNoise.SmoothStep(System.Double,System.Double,System.Double,System.Int32)">
 <summary>
 Stretches a value toward the ends of an interval (uses the Fade function defined by K. Perlin).
 </summary>
 <param name="x">value that will be stretched</param>
 <param name="lower">Lower end of the interval</param>
 <param name="upper">Upper end of the interval</param>
 <param name="Strength">Number of times the Fade function is applied.</param>
 <returns></returns>
</member>
<member name="T:App.Test.arwe.PrimAlgorithm">
 <summary>
 1. Start with a grid full of walls.
 2. Pick a cell, mark it as part of the maze. Add the walls of the cell to the wall list.
 3. While there are walls in the list: 
     1. Pick a random wall from the list. If only one of the cells that the wall divides is visited, then: 
         1. Make the wall a passage and mark the unvisited cell as part of the maze.
         2. Add the neighboring walls of the cell to the wall list.
     2. Remove the wall from the list.
 </summary>
</member>
<member name="T:App.Test.arwe.Randomized_Depth_First_Search">
 <summary>
 1. Given a current cell as a parameter
 2. Mark the current cell As visited
 3. While the current cell has any unvisited neighbour cells
     1. Choose one Of the unvisited neighbours
     2. Remove the wall between the current cell And the chosen cell
     3. Invoke the routine recursively For a chosen cell
 </summary>
</member>
</members>
</doc>
